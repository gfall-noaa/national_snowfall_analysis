PRO GET_HOURLY_RTMA184_2M_TEMP, $
    HourStartDate_YYYYMMDDHH, $ ; the start of the hour
    RTMADir, $                  ; location of RTMA archive
    ScratchDir, $               ; location for temporary/cache files
    NoDataValue, $              ; no data value
    tmpGrid, $                  ; output temperature grid
    RTMA184_GRID_PROJ_INFO = $  ; RTMA 184 grid/projection structure
      RTMA184GridProjInfo, $
    VERBOSE = verbose           ; report on decisions during execution

;+
; Get hourly Real Time Mesoscale Analysis (RTMA) 2-meter air
; temperatures. The "184" refers to the 2.5 km CONUS grid for RTMA and
; other NDFD products. See
; `http://www.nco.ncep.noaa.gov/pmb/docs/on388/tableb.html#GRID184
; <http://www.nco.ncep.noaa.gov/pmb/docs/on388/tableb.html#GRID184>`
;
; Archived data are stored in subdirectories of the form
; {RTMADir}/YYYY/MM/DD and files follow the naming conventions:
;
; 1. LTIA98_KWBR_{YYYYMMDDHH}00
;    This is how the data are stored (with physical elements in
;    separate files) in the NCEI archive at
;    ftp://nomads.ncdc.noaa.gov/NDGD
; 2. rtma2p5.{YYYYMMDD}.t{HH}z.2dvaranl_ndfd.grb2
;    This is how the data are stored (with all physical elements in
;    one file) in operational data at
;    ftp://ftp.ncep.noaa.gov/pub/data/nccf/com/rtma/prod
;
; :Params:
;
;     HourStartDate_YYYYMMDDHH : in, required, type=STRING
;         Start time of the hour in UTC, in the form YYYYMMDDHH. If we
;         want data for the 2018-07-03 12Z analysis (f00), then we
;         should set this to "2018070312".
;     RTMADir : in, required, type=STRING
;         The directory where Real Time Mesoscale Analysis (RTMA) data
;         are stored.
;     ScratchDir : in, required, type=STRING
;         The directory where temporary files generated by this
;         procedure and the procedures it calls are stored.
;     NoDataValue : in, required, type=FLOAT
;         The value to use for missing/no-data on all grids. Missing
;         values for input data (e.g., 9.999e20 on GRIB data produced
;         at NCEP) are replaced by this value, and missing/no-data is
;         set to this value for all outputs.
;     tmpGrid : out, type=FLTARR(1073 x 689)
;         The decoded RTMA "TMP:2 m above ground" GRIB record.
;
; :Keywords:
;
;     RTMA184_GRID_PROJ_INFO : type=STRUCT
;         A named variable that will capture the structure describing
;         the Lambert conformal 2.5 km CONUS grid (#184) and
;         coordinate system. If this variable is undefined, it will be
;         defined. If it is already defined, it will be verified
;         against the contents of the input GRIB2 file.
;         Structure tags:


; #$%^&*()- GREG YOU ARE HERE -()*&^%$#


;         lonV (type=DOUBLE):
;         The orientation longitude, degrees.
;
;         latD (type=DOUBLE):
;         The latitude where the grid spacing is defined, degrees.
;
;         latSec1 (type=DOUBLE):
;         The first standard parallel for the projection, degrees.
;
;         latSec2 (type=DOUBLE):
;         The second standard parallel for the projection, degrees.
;
;         eRadM (type=DOUBLE):
;         The radius of the spherical earth in the projection, meters.
;
;         lat00 (type=DOUBLE):
;         The lower left grid cell center latitude, degrees.
;
;         lon00 (type=DOUBLE):
;         The lower left grid cell center longitude, degrees.
;
;         nCols (type=LONG):
;         The number of columns in the GRIB record.
;
;         nRows (type=LONG):
;         The number of rows in the GRIB record.
;
;         dx (type=DOUBLE):
;         The grid spacing in x, meters.
;
;         dy (type=DOUBLE):
;         The grid spacing in y, meters.
;
;     VERBOSE : in, type=BOOLEAN
;         Activates the "verbose" option, causing this procedure to
;         produce some extra output text.
;-

  COMMON info, Message ; used by USR_MSG and ERR_MSG

;+
; The best way to check for the success of this procedure is to do
; "if NOT(ISA(tmpGrid) then STOP" or something similar in the caller,
; since all will be returned as !NULL if this procedure is unable to
; get data.
;-
  tmpGrid = !NULL

;+
; Error handler for anything the main procedure code misses. Example:
; RESTORE encounters a file that was truncated because a disk filled.
;-
  ;; CATCH, errorStatus
  ;; if (errorStatus ne 0) then begin
  ;;     ERR_MSG, !Error_State.Msg
  ;;     RETURN
  ;; endif

;+
; Check arguments for correct type and valid contents.
;-
  if NOT(ISA(HourStartDate_YYYYMMDDHH, 'STRING')) then begin
      ERR_MSG, 'Target date/time argument must be a STRING.'
      RETURN
  endif
  if (STRLEN(HourStartDate_YYYYMMDDHH) ne 10) then begin
      ERR_MSG, 'Invalid target date/time "' + $
               HourStartDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, 10 digits).'
      RETURN
  endif
  if NOT(STREGEX(HourStartDate_YYYYMMDDHH, '[0-9]{10}', /BOOLEAN)) $
      then begin
      ERR_MSG, 'Invalid target date/time "' + $
               HourStartDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, all numeric).'
      RETURN
  endif

  if NOT(ISA(RTMADir, 'STRING')) then begin
      ERR_MSG, 'Location of RTMA archive must be a STRING.'
      RETURN
  endif

  if NOT(FILE_TEST(RTMADir, /DIRECTORY)) then begin
      ERR_MSG, 'RTMA archive directory "' + RTMADir + '" not found.'
      RETURN
  endif

  if NOT(FILE_TEST(RTMADir, /READ)) then begin
      ERR_MSG, 'RTMA archive directory "' + RTMADir + '" not readable.'
      RETURN
  endif

  if NOT(ISA(ScratchDir, 'STRING')) then begin
      ERR_MSG, 'Location of scratch directory must be a STRING.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /DIRECTORY)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not found.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /READ)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not readable.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /WRITE)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not writeable.'
      RETURN
  endif

  if NOT(ISA(NoDataValue, 'FLOAT')) then $
      ERR_MSG, 'WARNING: no-data value should be a floating point value.'

  if KEYWORD_SET(RTMA184GridProjInfo) then begin

;+
;     Verify the RTMA184GridProjInfo structure.
;-
      sizeRTMA184GridProjInfo = SIZE(RTMA184GridProjInfo)
      if (sizeRTMA184GridProjInfo[0] ne 1) then begin
          ERR_MSG, 'RTMA184_GRID_PROJ_INFO structure mismatch (non-scalar).'
          RETURN
      endif

      if ((sizeRTMA184GridProjInfo[1] ne 1) or $
          (sizeRTMA184GridProjInfo[2] ne 8)) then begin
          ERR_MSG, 'RTMA184_GRID_PROJ_INFO structure mismatch ' + $
                   '(not a structure).'
          RETURN
      endif

      sizeRTMA184GridProjInfo = !NULL

      structOK = 1

      tagNames = TAG_NAMES(RTMA184GridProjInfo)
      ind = WHERE(tagNames eq 'LONV', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lonV" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATD', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latD" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC1', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec1" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC2', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec2" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'ERADM', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "eRadM" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LAT00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lat00" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LON00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lon00" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'NCOLS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nCols" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'NROWS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nRows" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'DX', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dx" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'DY', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dy" tag in RTMA184_GRID_PROJ_INFO.'
          structOK = 0
      endif

      if structOK then begin

          if NOT(ISA(RTMA184GridProjInfo.lonV, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lonV".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.latD, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latD".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.latSec1, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latSec1".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.latSec2, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latSec2".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.eRadM, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"eRadM".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.lat00, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lat00".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.lon00, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lon00".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.nCols, 'LONG')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing LONG element ' + $
                       '"nCols".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.nRows, 'LONG')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing LONG element ' + $
                       '"nRows".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.dx, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"dx".'
              structOK = 0
          endif

          if NOT(ISA(RTMA184GridProjInfo.dy, 'DOUBLE')) then begin
              ERR_MSG, 'RTMA184_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"dy".'
              structOK = 0
          endif

      endif

      if NOT(structOK) then begin

          ERR_MSG, 'Unexpected RTMA184_GRID_PROJ_INFO structure definition.'
          RETURN

      endif

      structOK = !NULL

  endif

;+
; Read RTMA (2.5 km "184" grid) data from GRIB files.
;-
  hourStartDate_YYYY = STRMID(hourStartDate_YYYYMMDDHH, 0, 4)
  hourStartDate_MM = STRMID(hourStartDate_YYYYMMDDHH, 4, 2)
  hourStartDate_DD = STRMID(hourStartDate_YYYYMMDDHH, 6, 2)
  hourStartDate_HH = STRMID(hourStartDate_YYYYMMDDHH, 8, 2)
  hourStartDate_YYYYMMDD = STRMID(hourStartDate_YYYYMMDDHH, 0, 8)

;+
; Identify the directory where GRIB files will be sought.
;-
  GRIBDir = RTMADir + $
            '/' + hourStartDate_YYYY + $
            '/' + hourStartDate_MM + $
            '/' + hourstartDate_DD

; 1. LTIA98_KWBR_{YYYYMMDDHH}00
;    This is how the data are stored (with physical elements in
;    separate files) in the NCEI archive at
;    ftp://nomads.ncdc.noaa.gov/NDGD
; 2. rtma2p5.{YYYYMMDD}.t{HH}z.2dvaranl_ndfd.grb2
;    This is how the data are stored (with all physical elements in
;    one file) in operational data at
;    ftp://ftp.ncep.noaa.gov/pub/data/nccf/com/rtma/prod

  GRIBFile = 'LTIA98_KWBR_' + hourStartDate_YYYYMMDDHH + '00'

  if NOT(FILE_TEST(GRIBDir + '/' + GRIBFile)) then begin

      if KEYWORD_SET(verbose) then $
          USR_MSG, 'RTMA temperature file ' + GRIBDir + '/' + GRIBFile + $
                   ' not found.'

      GRIBFile = 'rtma2p5.' + hourStartDate_YYYYMMDD + $
                 '.t' + hourStartDate_HH + 'z.2dvaranl_ndfd.grb2'

      if KEYWORD_SET(verbose) then $
          USR_MSG, 'Trying ' + GRIBDir + '/' + GRIBFile

      if NOT(FILE_TEST(GRIBDir + '/' + GRIBFile)) then begin
          if KEYWORD_SET(verbose) then $
              USR_MSG, 'RTMA temperature file ' + GRIBDir + '/' + GRIBFile + $
                       ' not found.'
          RETURN
      endif

  endif

  matchStr = ':TMP:2 m above ground:anl::' ; The extra ":" at the end
                                           ; prevents wgrib2 from matching
                                           ; the "analysis/forecast error"
                                           ; record (see also
                                           ; wgrib2 -match_inv).

  if KEYWORD_SET(verbose) then $
      USR_MSG, 'Decoding TMP from "' + matchStr + '" record in ' + $
               GRIBDir + '/' + GRIBFile

;+
; Decode TMP record.
;-
  DECODE_GRIB2_RECORD, GRIBDir + '/' + GRIBFile, $
                       ScratchDir, $
                       matchStr, $
                       record, vt, lev, ftime, $
                       varAbbrev, varField, varUnits, $
                       nCols_, nRows_, $
                       tmpGrid_, $
                       NO_DATA_VALUE = NoDataValue

  if NOT(ISA(tmpGrid_)) then begin
      ERR_MSG, 'Failed to decode "' + matchStr + '" record from ' + $
               GRIBDir + '/' + GRIBFile
      RETURN
  endif

;+
; Check parameters of TMP record.
;-
  if (varAbbrev ne 'TMP') then begin
      ERR_MSG, 'GRIB file ' + GRIBDir + '/' + GRIBFile + $
               ' "' + matchStr + '" record has invalid abbreviation ' + $
               '"' + varAbbrev + '".'
      RETURN
  endif

  if (varField ne 'Temperature') then begin
      ERR_MSG, 'GRIB file ' + GRIBDir + '/' + GRIBFile + $
               ' "' + matchStr + '" record has invalid field name ' + $
               '"' + varField + '".'
      RETURN
  endif

  if (varUnits ne 'K') then begin
      ERR_MSG, 'GRIB file ' + GRIBDir + '/' + GRIBFile + $
               ' "' + matchStr + '" record has invalid units ' + $
               '"' + varUnits + '".'
  endif

;+
; Establish grid dimensions.
;-
  nCols = nCols_
  nRows = nRows_

  if NOT(KEYWORD_SET(RTMA184GridProjInfo)) then begin

;+
;     Create the RTMA184GridProjInfo structure to store grid and
;     projection parameters, based on the "TMP" record.
;-
      GET_GRIB2_LAMBERT_CONFORMAL_GRID_INFO, $
          GRIBFile, GRIBDir, ScratchDir, $
          matchStr, $
          nCols_, nRows_, $
          lat00, lon00, lonV, latD, latSec1, latSec2, latsp, lonsp, $
          dx, dy, $
          STATUS

      if NOT(status) then begin
          ERR_MSG, 'Failed to read Lambert conformal projection ' + $
                   'parameters from GRIB file ' + $
                   GRIBDir + '/' + GRIBFile + ' "' + matchStr + $
                   '" record.'
          RETURN
      endif

;+
;     Confirm the NCEP sphere.
;-

;+
;     1. Grid template.
;-
      cmd = 'wgrib2 -match "' + matchStr + '" -get_byte 3 13 2 ' + $
            GRIBDir + '/' + GRIBFile
      SPAWN, cmd, gridDefTemplate, EXIT_STATUS = status
      if ( status ne 0 ) then begin
          ERR_MSG, 'Failed to read grid definition section in GRIB file ' + $
                   GRIBDir + '/' + GRIBFile + '"' + matchStr +'" record.'
          RETURN
      endif
      if ( STRMID ( gridDefTemplate[0], STRLEN ( gridDefTemplate[0] ) - 4, $
           4 ) ne '0,30' ) then begin
          ERR_MSG, 'Grid definition template number (see GRIB2 table 3.1) ' + $
                   '"' + gridDefTemplate[0] + '" not consistent with ' + $
                   ' Lambert Conformal projection.'
          RETURN
      endif

;+
;     2. Shape of the earth.
;-
      cmd = 'wgrib2 -match "' + matchStr + '" -get_byte 3 15 1 ' + $
            GRIBDir + '/' + GRIBFile
      SPAWN, cmd, shapeOfEarth, EXIT_STATUS = status
      if (status ne 0) then begin
          ERR_MSG, 'Failed to read Lambert conformal grid template ' + $
                   'in GRIB file ' + $
                   GRIBDir + '/' + GRIBFile + '"' + matchStr + '" record.'
          RETURN
      endif
      shapeOfEarth = FIX(STRMID(shapeOfEarth[0], $
                                STRLEN(shapeOfEarth[0]) - 1, 1))
      case shapeOfEarth of
          0 : eRadM = 6367470.0D
          1 : begin
              cmd = 'wgrib2 -match "' + matchStr + '" -get_byte 3 16 1 ' + $
                    GRIBDir + '/' + GRIBFile
              SPAWN, cmd, earthRadScaleFactor, EXIT_STATUS = status
              if (status ne 0) then begin
                  ERR_MSG, 'Failed to read earth radius scale factor ' + $
                           'in GRIB file ' + $
                           GRIBDir + '/' + GRIBFile + $
                           '"' + matchStr + '" record.'
                  RETURN
              endif
              earthRadScaleFactor = $
                  FIX(STRMID(earthRadScaleFactor[0], $
                             STRPOS(earthRadScaleFactor[0], '=') + 1, $
                             STRLEN(earthRadScaleFactor[0]) - $
                             STRPOS(earthRadScaleFactor[0], '=') - $
                             1))
              if (earthRadScaleFactor ne 0) then begin
                  ERR_MSG, 'GRIB2 earth radius scale factor value ' + $
                           STRCRA(earthRadScaleFactor) + $
                           ' is not supported.'
                  RETURN
              endif
              cmd = 'wgrib2 -match "' + matchStr + '" -get_byte 3 17 4 ' + $
                    GRIBDir + '/' + GRIBFile
              SPAWN, cmd, earthRadScaleValue, EXIT_STATUS = status
              if (status ne 0) then begin
                  ERR_MSG, 'Failed to read earth radius scale value ' + $
                           'in GRIB file ' + $
                           GRIBDir + '/' + GRIBFile + $
                           '"' + matchStr + '" record.'
                  RETURN
              endif
              earthRadScaleValue = $
                  STRMID(earthRadScaleValue[0], $
                         STRPOS(earthRadScaleValue[0], '=') + 1, $
                         STRLEN(earthRadScaleValue[0]) - $
                         STRPOS(earthRadScaleValue[0], '=') - $
                         1)
              earthRadScaleValue = FIX(STRSPLIT(earthRadScaleValue, $
                                                ',', /EXTRACT))
              eRadM = DOUBLE(earthRadScaleValue[0]) * 256.0D^3.0D + $
                      DOUBLE(earthRadScaleValue[1]) * 256.0D^2.0D + $
                      DOUBLE(earthRadScaleValue[2]) * 256.0D + $
                      DOUBLE(earthRadScaleValue[3])
          end
          6 : eRadM = 6371229.0D
          else : begin
              ERR_MSG, 'GRIB2 shape-of-earth value ' + STRCRA(shapeOfEarth) + $
                       ' is not supported.'
              RETURN
          end
      endcase

;+
;     Verify grid size is unchanged.
;-
      if (nCols_ ne nCols) then begin
          ERR_MSG, 'Grid columns in GRIB file ' + $
                   GRIBDir + '/' + GRIBFile + ' "' + matchStr + $
                   '" record have changed.'
          RETURN
      endif
      if (nRows_ ne nRows) then begin
          ERR_MSG, 'Grid rows in GRIB file ' + $
                   GRIBDir + '/' + GRIBFile + ' "' + matchStr + $
                   '" record have changed.'
          RETURN
      endif

;+
;     Create data structure for the RTMA 184 grid and projection.
;-
      RTMA184GridProjInfo = $
          {lonV:    lonV, $       ; orientation longitude
           latD:    latD, $       ; latitude where dx and dy are specified
           latSec1: latSec1, $    ; first standard parallel
           latSec2: latSec2, $    ; second standard parallel
           eRadM:   eRadM, $
           lat00:   lat00, $      ; deprojected latitude of LL cell center
           lon00:   lon00, $      ; deprojected longitude of LL cell center
           nCols:   nCols, $      ; # columns
           nRows:   nRows, $      ; # rows
           dx:      dx, $         ; x resolution at latD, meters
           dy:      dy}           ; y resolution at latD, meters

  endif else begin

;+
;     Confirm that nCols and nRows from decoded GRIB2 records match
;     structure.
;-
      dimsOK = 1

      if (nCols ne RTMA184GridProjInfo.nCols) then begin
          ERR_MSG, 'Grid columns in decoded GRIB2 data ' + $
                   '(' + STRCRA(nCols) + ') ' + $
                   'do not match RTMA184_GRID_PROJ_INFO value ' + $
                   '(' + STRCRA(RTMA184GridProjInfo.nCols) + ').'
          dimsOK = 0
      endif

      if (nRows ne RTMA184GridProjInfo.nRows) then begin
          ERR_MSG, 'Grid rows in decoded GRIB2 data ' + $
                   '(' + STRCRA(nRows) + ') ' + $
                   'do not match RTMA184_GRID_PROJ_INFO value ' + $
                   '(' + STRCRA(RTMA184GridProjInfo.nRows) + ').'
          dimsOK = 0
      endif

      if NOT(dimsOK) then stop;RETURN

  endelse

;+
; Replace temporary grid.
;-
  tmpGrid = TEMPORARY(tmpGrid_)

  RETURN

end
