PRO GET_ACCUM_RAP130_APCP_WEASD, $
    AccumEndDate_YYYYMMDDHH, $
    DurationHours, $
    TargetFcstHour, $
    MinSubFcstHour, $
    MaxSubFcstHour, $
    RAPDir, $
    ScratchDir, $
    NoDataValue, $
    accumAPCPGrid, $
    accumWEASDGrid, $
    perfect, $
    MAX_NUM_SUB_FCST_HOURS = maxNumSubFcstHours, $
    RAP_GRID_PROJ_INFO = RAPGridProjInfo, $
    MIN_FORECAST_HOUR_FOUND = minFcstHourFound, $
    MAX_FORECAST_HOUR_FOUND = maxFcstHourFound, $
    VERBOSE = Verbose, $
    NO_SAVE_FILE = No_save_file
;+
; Get accumulated hourly Rapid Refresh (RAP) quantitative
; precipitation forecasts (QPF), including total precipitation--either
; total precipitation (APCP) or the sum of convective precipitation
; (ACPCP) and large scale precipitation (NCPCP)--and water equivalent
; of accumulated snow depth (WEASD) from GRIB files.
;
; The "130" refers to the 13 km CONUS grid for RAP. See
; `http://www.nco.ncep.noaa.gov/pmb/docs/on388/tableb.html#GRID130
; <http://www.nco.ncep.noaa.gov/pmb/docs/on388/tableb.html#GRID130>`
;
; There are a few different conventions for storing/archiving RAP
; data that this procedure will need to handle. In the case of
; long-term archives, data are stored in directories such as:
;
;   /nwcdev/archive/RAP_archive/{YYYY}/{MM}/{DD}
;
; In the case of GRIB files handled by operations, data are stored in
; a place like
;
;   /operations/misc/gisrs_incoming/model
;
; In all cases we assume the GRIB files have names following one of
; these conventions:
;
;   rap.{YYYYMMDD}.t{HH}z.awp130pgrbf{FF}.grib2
;   rap.{YYYYMMDD}.t{HH}z.awp130bgrbf{FF}.grib2
;   {YY}{DOY}.rap.t{HH}z.awp130pgrbf{FF}.grib2
;   {YY}{DOY}.rap.t{HH}z.awp130bgrbf{FF}.grib2
;
; The biggest complication is that for older data, the APCP (or
; alternatively ACPCP + NCPCP, which this procedure can handle) and
; WEASD fields do not provide accumulations for the "last hour"
; represented by the file, but instead provide accumulations from the
; cycle time, or from the most recent multiple of 3 hours in the
; forecast. That means if you want hour 5 precip, you will need to
; take the fields from an f05 file (accumulations from 3-5 hours) and
; subtract the fields from an f04 file (accumulations from 3-4
; hours). This is not always the case, but with most older data, it
; is. Fortunately, this determination is now made fully within
; FIND_HOURLY_RAP130_QPF_AND_METHOD, called by
; GET_HOURLY_RAP130_APCP_WEASD.
;
; :Params:
;
;     AccumEndDate_YYYYMMDDHH : in, required, type=STRING
;         End time of accumulation period in UTC, in the form
;         YYYYMMDDHH.
;     DurationHours : in, required, type=INT
;         Accumulation duration in hours; e.g., 24 for a day of
;         precipitation accumulation.
;     TargetFcstHour : in, required, type=INT
;         The forecast hour that is sought for all QPF data.
;     MinSubFcstHour : in, required, type=INT
;         The minimum forecast hour to substitute in place of
;         TargetFcstHour, if QPF for TargetFcstHour is unavailable.
;     MaxSubFcstHour : in, required, type=INT
;         The maximum forecast hour to substitute in place of
;         TargetFcstHour, if QPF for TargetFcstHour is unavailable.
;     RAPDir : in, required, type=STRING
;         The directory where Rapid Refresh (RAP) quantitative
;         precipitation forecasts (QPF) are stored.
;     ScratchDir : in, required, type=STRING
;         The directory where temporary files generated by this
;         procedure and the procedures it calls are stored.
;     NoDataValue : in, required, type=FLOAT
;         The value to use for missing/no-data on all grids. Missing
;         values for input data (e.g., 9.999e20 on GRIB data produced
;         at NCEP) are replaced by this value, and missing/no-data is
;         set to this value for all outputs.
;     accumAPCPGrid : out, type=FLTARR(451 x 337)
;         The aggregated RAP "total precipitation".
;     accumWEASDGrid : out, type=FLTARR(451 x 337)
;         The aggregated RAP "water equivalent of accumulated snow
;         depth".
;     perfect : out, type=BYTE
;         A flag that indicates whether (1) or not (0) data was found
;         for the TargetFcstHour for every hour of the accumulations.
;
; :Keywords:
;
;    MAX_NUM_SUB_FCST_HOURS : in, type=INT
;         The maximum number of hours of non-target (i.e., substitute)
;         forecast hours allowed to produce the accumulation. If this
;         number is exceeded the procedure exits without producing any
;         output, just as if data were missing.
;
;     RAP_GRID_PROJ_INFO : type=STRUCT
;         A named variable that will capture the structure describing
;         the RAP 130 (Lambert conformal) grid and coordinate
;         system. If this variable is undefined, it will be
;         defined. If it is already defined, it will be verified
;         against the contents of all input GRIB2 files.
;         Structure tags:
;
;         lonV (type=DOUBLE):
;         The orientation longitude, degrees.
;
;         latD (type=DOUBLE):
;         The latitude where the grid spacing is defined, degrees.
;
;         latSec1 (type=DOUBLE):
;         The first standard parallel for the projection, degrees.
;
;         latSec2 (type=DOUBLE):
;         The second standard parallel for the projection, degrees.
;
;         eRadM (type=DOUBLE):
;         The radius of the spherical earth in the projection, meters.
;
;         lat00 (type=DOUBLE):
;         The lower left grid cell center latitude, degrees.
;
;         lon00 (type=DOUBLE):
;         The lower left grid cell center longitude, degrees.
;
;         nCols (type=LONG):
;         The number of columns in the GRIB record.
;
;         nRows (type=LONG):
;         The number of rows in the GRIB record.
;
;         dx (type=DOUBLE):
;         The grid spacing in x, meters.
;
;         dy (type=DOUBLE):
;         The grid spacing in y, meters.
;
;     MIN_FORECAST_HOUR_FOUND : out, type=INT
;         Set this to a named variable in which the minimum forecast
;         hour contributing to the accumulation is returned.
;
;     MAX_FORECAST_HOUR_FOUND : out, type=INT
;         Set this to a named variable in which the maximum forecast
;         hour contributing to the accumulation is returned.
;
;     VERBOSE : in, type=BOOLEAN
;         Activates the "verbose" option, causing this procedure to
;         produce some extra output text.
;
;     NO_SAVE_FILE : in, type=BOOLEAN
;         Deactivates the default behavior of this procedure, which
;         stores a version of its results in the ScratchDir as an IDL
;         save file, and reads its data from a save file if one is
;         found.
;-
  COMMON info, Message ; used by USR_MSG and ERR_MSG

;+
; The best way to check for the success of this procedure is to do
; "if (NOT(ISA(accumAPCPGrid)) or NOT(ISA(accumWEASDGrid))) then STOP"
; or something similar in the caller, since both will be returned as
; !NULL if this procedure is unable to get data.
;-
  accumAPCPGrid = !NULL
  accumWEASDGrid = !NULL

  perfect = 0B

;+
; Error handler for anything the main procedure code misses. Example:
; RESTORE encounters a file that was truncated because a disk filled.
; Comment this section out when debugging.
;-
  CATCH, errorStatus
  if (errorStatus ne 0) then begin
      ERR_MSG, !Error_State.Msg
      RETURN
  endif

;+
; Check arguments for correct type and valid contents.
;-
  if NOT(ISA(AccumEndDate_YYYYMMDDHH, 'STRING')) then begin
      ERR_MSG, 'Accumulation end date/time argument ' + $
               'must be a STRING.'
      RETURN
  endif
  if (STRLEN(AccumEndDate_YYYYMMDDHH) ne 10) then begin
      ERR_MSG, 'Invalid accumulation end date/time "' + $
               AccumEndDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, 10 digits).'
      RETURN
  endif
  if NOT(STREGEX(AccumEndDate_YYYYMMDDHH, '[0-9]{10}', /BOOLEAN)) $
      then begin
      ERR_MSG, 'Invalid accumulation end date/time "' + $
               AccumEndDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, all numeric).'
      RETURN
  endif

  if (DurationHours lt 1) then begin
      ERR_MSG, 'Duration must be a positive integer number of hours.'
      RETURN
  endif

  if ((TargetFcstHour lt 1) or $
      (MinSubFcstHour lt 1) or $
      (MaxSubFcstHour lt 1)) then begin
      ERR_MSG, 'All forecast hour options must be greater than zero.'
      RETURN
  endif

  if (MinSubFcstHour gt MaxSubFcstHour) then begin
      ERR_MSG, 'Minimum substitute forecast hour may not be larger than ' + $
               'maximum substitute forecast hour.'
      RETURN
  endif

  if NOT(ISA(RAPDir, 'STRING')) then begin
      ERR_MSG, 'Location of RAP archive must be a STRING.'
      RETURN
  endif

  if NOT(FILE_TEST(RAPDir, /DIRECTORY)) then begin
      ERR_MSG, 'RAP archive directory "' + RAPDir + '" not found.'
      RETURN
  endif

  if NOT(FILE_TEST(RAPDir, /READ)) then begin
      ERR_MSG, 'RAP archive directory "' + RAPDir + '" not readable.'
      RETURN
  endif

  if NOT(ISA(ScratchDir, 'STRING')) then begin
      ERR_MSG, 'Location of scratch directory must be a STRING.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /DIRECTORY)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not found.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /READ)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not readable.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /WRITE)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not writeable.'
      RETURN
  endif

  if NOT(ISA(NoDataValue, 'FLOAT')) then $
      ERR_MSG, 'WARNING: no-data value should be a floating point value.'

  if KEYWORD_SET(maxNumSubFcstHours) then begin

      if (maxNumSubFcstHours gt DurationHours) then begin
          ERR_MSG, 'WARNING: MAX_NUM_SUB_FCST_HOURS was set to ' + $
                   STRCRA(maxNumSubFcstHours) + $
                   ', which exceeds the accumulation duration of ' + $
                   STRCRA(DurationHours) + '. Adjusting.'
      endif

      maxNumSubFcstHours = maxNumSubFcstHours < DurationHours

  endif else begin

      maxNumSubFcstHours = DurationHours

  endelse

  if KEYWORD_SET(RAPGridProjInfo) then begin

;+
;     Verify the RAPGridProjInfo structure.
;-
      sizeRAPGridProjInfo = SIZE(RAPGridProjInfo)
      if (sizeRAPGridProjInfo[0] ne 1) then begin
          ERR_MSG, 'RAP_GRID_PROJ_INFO structure mismatch (non-scalar).'
          RETURN
      endif

      if ((sizeRAPGridProjInfo[1] ne 1) or $
          (sizeRAPGridProjInfo[2] ne 8)) then begin
          ERR_MSG, 'RAP_GRID_PROJ_INFO structure mismatch ' + $
                   '(not a structure).'
          RETURN
      endif

      sizeRAPGridProjInfo = !NULL

      structOK = 1

      tagNames = TAG_NAMES(RAPGridProjInfo)
      ind = WHERE(tagNames eq 'LONV', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lonV" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATD', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latD" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC1', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec1" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC2', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec2" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'ERADM', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "eRadM" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LAT00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lat00" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LON00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lon00" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'NCOLS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nCols" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'NROWS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nRows" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'DX', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dx" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'DY', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dy" tag in RAP_GRID_PROJ_INFO.'
          structOK = 0
      endif

      if structOK then begin

          if NOT(ISA(RAPGridProjInfo.lonV, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lonV".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.latD, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latD".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.latSec1, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latSec1".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.latSec2, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latSec2".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.eRadM, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"eRadM".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.lat00, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lat00".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.lon00, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lon00".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.nCols, 'LONG')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing LONG element ' + $
                       '"nCols".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.nRows, 'LONG')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing LONG element ' + $
                       '"nRows".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.dx, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"dx".'
              structOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo.dy, 'DOUBLE')) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"dy".'
              structOK = 0
          endif

      endif

      if NOT(structOK) then begin

          ERR_MSG, 'Unexpected RAP_GRID_PROJ_INFO structure definition.'
          RETURN

      endif

      structOK = !NULL

  endif

  savFile = 'RAP_130_APCP_WEASD' + $
            '_f' + STRING(TargetFcstHour, FORMAT = '(I2.2)') + $
            '_' + STRCRA(DurationHours) + 'h' + $
            '_ending_' + AccumEndDate_YYYYMMDDHH + '.sav'

  if (NOT(KEYWORD_SET(No_save_file)) and $
      FILE_TEST(ScratchDir + '/' + savFile)) then begin

;+
;     Get data from cache file rather than reading RAP data
;     directly.
;-
      if KEYWORD_SET(Verbose) then $
          USR_MSG, 'Reading ' + ScratchDir + '/' + savFile

      RESTORE, ScratchDir + '/' + savFile

;+
;     Verify the contents of the save file.
;-
      if NOT(ISA(accumAPCPGrid)) then begin
          ERR_MSG, 'No "accumAPCPGrid" variable in ' + $
                   ScratchDir + '/' + savFile
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      gridSize = SIZE(accumAPCPGrid)
      if (gridSize[0] ne 2) then begin
          ERR_MSG, '"accumAPCPGrid" in ' + ScratchDir + '/' + saveFile + $
                   ' is not a 2-D array.'
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      nCols = gridSize[1]
      nRows = gridSize[2]

      if NOT(ISA(accumWEASDGrid)) then begin
          ERR_MSG, 'No "accumWEASDGrid" variable in ' + $
                   ScratchDir + '/' + savFile
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      gridSize = SIZE(accumWEASDGrid)
      if (gridSize[0] ne 2) then begin
          ERR_MSG, '"accumWEASDGrid" in ' + ScratchDir + '/' + saveFile + $
                   ' is not a 2-D array.'
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      if (gridSize[1] ne nCols) then begin
          ERR_MSG, '"accumWEASDGrid" column dimension (' + $
                   STRCRA(gridSize[1]) + ') ' + $
                   'does not match that of "accumAPCPGrid" (' + $
                   STRCRA(nCols) + ').'
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      if (gridSize[2] ne nRows) then begin
          ERR_MSG, '"accumWEASDGrid" row dimension (' + $
                   STRCRA(gridSize[2]) + ') ' + $
                   'does not match that of "accumAPCPGrid" (' + $
                   STRCRA(nRows) + ').'
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      gridSize = !NULL

      if NOT(ISA(ndv_)) then begin
          ERR_MSG, 'Missing "ndv_" variable in ' + $
                   ScratchDir + '/' + savFile
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      if NOT(ISA(RAPGridProjInfo_)) then begin
          ERR_MSG, 'No RAP grid/projection info structure in ' + $
                   ScratchDir + '/' + savFile
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

;+
;     Verify the structure of RAPGridProjInfo_ and grid dimensions.
;-
      foo = SIZE(RAPGridProjInfo_)
      if (foo[0] ne 1) then begin
          ERR_MSG, 'RAPGridProjInfo_ structure mismatch (non-scalar) ' + $
                   'in ' + ScratchDir + '/' + savFile
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      if ((foo[1] ne 1) or (foo[2] ne 8)) then begin
          ERR_MSG, 'RAPGridProjInfo_ structure mismatch ' + $
                   '(not a structure) ' + $
                   'in ' + ScratchDir + '/' + savFile
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN
      endif

      savFileOK = 1

      tagNames = TAG_NAMES(RAPGridProjInfo_)
      ind = WHERE(tagNames eq 'LONV', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lonV" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LATD', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latD" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC1', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec1" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC2', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec2" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'ERADM', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "eRadM" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LAT00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lat00" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LON00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lon00" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'NCOLS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nCols" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'NROWS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nRows" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'DX', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dx" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'DY', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dy" tag in "RAPGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      if savFileOK then begin

          if NOT(ISA(RAPGridProjInfo_.lonV, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"lonV" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.latD, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"latD" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.latSec1, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"latSec1" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.latSec2, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"latSec2" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.eRadM, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"eRadM" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.lat00, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"lat00" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.lon00, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"lon00" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.nCols, 'LONG')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing LONG element ' + $
                       '"nCols" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif else begin
              if (nCols ne RAPGridProjInfo_.nCols) then begin
                  ERR_MSG, 'Grid columns in ' + $
                           ScratchDir + '/' + savFile + $
                           ' (' + STRCRA(nCols) + ') ' + $
                           'do not match "RAPGridProjInfo_" value ' + $
                           '(' + STRCRA(RAPGridProjInfo_.nCols) + ').'
                  savFileOK = 0
              endif
          endelse

          if NOT(ISA(RAPGridProjInfo_.nRows, 'LONG')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing LONG element ' + $
                       '"nRows" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif else begin
              if (nRows ne RAPGridProjInfo_.nRows) then begin
                  ERR_MSG, 'Grid rows in ' + $
                           ScratchDir + '/' + savFile + $
                           ' (' + STRCRA(nRows) + ') ' + $
                           'do not match "RAPGridProjInfo_" value ' + $
                           '(' + STRCRA(RAPGridProjInfo_.nRows) + ').'
                  savFileOK = 0
              endif
          endelse

          if NOT(ISA(RAPGridProjInfo_.dx, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"dx" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(RAPGridProjInfo_.dy, 'DOUBLE')) then begin
              ERR_MSG, '"RAPGridProjInfo_" missing DOUBLE element ' + $
                       '"dy" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

      endif

      if (savFileOK and KEYWORD_SET(RAPGridProjInfo)) then begin

;+
;         Verify RAPGridProjInfo structure from caller against
;         RAPGridProjInfo_ structure from save file.
;-
          if NOT(COMPARE(RAPGridProjInfo.lonV, RAPGridProjInfo_.lonV)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "lonV" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.latD, RAPGridProjInfo_.latD)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "latD" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.latSec1, $
                         RAPGridProjInfo_.latSec1)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "latSec1" ' + $
                       'mismatch between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.latSec2, $
                         RAPGridProjInfo_.latSec2)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "latSec2" ' + $
                       'mismatch between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.eRadM, $
                         RAPGridProjInfo_.eRadM)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "eRadM" ' + $
                       'mismatch between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.lat00, RAPGridProjInfo_.lat00)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "lat00" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.lon00, RAPGridProjInfo_.lon00)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "lon00" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if (RAPGridProjInfo.nCols ne RAPGridProjInfo_.nCols) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "nCols" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if (RAPGridProjInfo.nRows ne RAPGridProjInfo_.nRows) then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "nRows" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.dx, RAPGridProjInfo_.dx)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "dx" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(RAPGridProjInfo.dy, RAPGridProjInfo_.dy)) $
              then begin
              ERR_MSG, 'RAP_GRID_PROJ_INFO structure "dy" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

      endif

      if (savFileOK and NOT(KEYWORD_SET(RAPGridProjInfo))) then begin

;+
;         Copy RAPGridProjInfo structure from save file.
;-
          RAPGridProjInfo = RAPGridProjInfo_

      endif

      if NOT(savFileOK) then begin

          ERR_MSG, 'Unexpected structure/content in IDL save file ' + $
                   savFile + '; returning NULL grids.'
          accumAPCPGrid = !NULL
          accumWEASDGrid = !NULL
          RETURN

      endif

;+
;     Verify the no-data value is consistent; modify if it is not.
;-
      if (ndv_ ne NoDataValue) then begin
          ERR_MSG, 'WARNING: value of "ndv_" variable in ' + $
                  ScratchDir + '/' + savFile + $
                  ' (' + STRCRA(ndv_) + ') differs from ' + $
                  ' argument "NoDataValue" ' + $
                  '(' + STRCRA(NoDataValue) + '). Will adapt.'
          ind = WHERE(accumAPCPGrid eq ndv_, count)
          if (count gt 0) then accumAPCPGrid[ind] = NoDataValue
          ind = WHERE(accumWEASDGrid eq ndv_, count)
          if (count gt 0) then accumWEASDGrid[ind] = NoDataValue
          ind = !NULL
      endif

      perfect = 1B
      minFcstHourFound = TargetFcstHour ; save file would not have been
      maxFcstHourFound = TargetFcstHour ; made otherwise

      RETURN

  endif

;+
; Read RAP data from GRIB file/s. This is really the beginning of the
; process if we do not have a SAVE file.
;-
  perfect_ = 1B ; flag to indicate that we got our first choice for all.

  accumEndDate_Julian = YYYYMMDDHH_TO_JULIAN(AccumEndDate_YYYYMMDDHH)

  minFcstHourFound_ = (MaxSubFcstHour > TargetFcstHour) + 1
  maxFcstHourFound_ = (MinSubFcstHour < TargetFcstHour) - 1

  numSubFcstHours = 0

  for hc = 0, DurationHours - 1 do begin

      hourEndDate_Julian = accumEndDate_Julian - $
                           DOUBLE(DurationHours - 1) / 24.0D + $
                           DOUBLE(hc) / 24.0D

      hourEndDate_YYYYMMDDHH = JULIAN_TO_YYYYMMDDHH(hourEndDate_Julian)

      hourlyAPCPGrid = !NULL
      hourlyWEASDGrid = !NULL

      GET_HOURLY_RAP130_APCP_WEASD, $
          hourEndDate_YYYYMMDDHH, $
          TargetFcstHour, $
          MinSubFcstHour, $
          MaxSubFcstHour, $
          RAPDir, $
          ScratchDir, $
          NoDataValue, $
          hourlyAPCPGrid, $
          hourlyWEASDGrid, $
          perfect__, $
          RAP_GRID_PROJ_INFO = RAPGridProjInfo, $
          FORECAST_HOUR_FOUND = fcstHourFound, $
          VERBOSE = KEYWORD_SET(Verbose), $
          /NO_SAVE_FILE ; regardless of setting of NO_SAVE_FILE in call

      if (NOT(ISA(hourlyAPCPGrid)) or $
          NOT(ISA(hourlyWEASDGrid))) then begin
          if KEYWORD_SET(Verbose) then $
              ERR_MSG, 'Failed to get RAP precipitation for hour ending ' + $
                       hourEndDate_YYYYMMDDHH
          RETURN
      endif

      minFcstHourFound_ = minFcstHourFound_ < fcstHourFound
      maxFcstHourFound_ = maxFcstHourFound_ > fcstHourFound

      if NOT(perfect__) then perfect_ = 0B ; only takes one not perfect!

      if (fcstHourFound ne TargetFcstHour) then begin
          if perfect__ then STOP ; PROGRAMMING ERROR
          numSubFcstHours++
      endif

      if (numSubFcstHours gt maxNumSubFcstHours) then begin
          ;if KEYWORD_SET(verbose) then $
          ERR_MSG, 'Number of forecast substitutions needed ' + $
                   'for full accumulation exceeds the maximum value ' + $
                   '(' + STRCRA(maxNumSubFcstHours) + ') ' + $
                   '; failed to generate accumulation.'
          RETURN
      endif

      if (hc eq 0) then begin

          accumAPCPGrid_ = hourlyAPCPGrid
          accumWEASDGrid_ = hourlyWEASDGrid

      endif else begin

          ind = WHERE(accumAPCPGrid_ eq NoDataValue, beforeCount)
          ind = WHERE((accumAPCPGrid_ eq NoDataValue) or $
                      (hourlyAPCPGrid eq NoDataValue), count)
          accumAPCPGrid_ = accumAPCPGrid_ + hourlyAPCPGrid
          if (count gt 0) then accumAPCPGrid_[ind] = NoDataValue
          if (count gt beforeCount) then $
              USR_MSG, 'WARNING: no-data values added to accumulated ' + $
                       '"APCP" grid for hour ending ' + $
                       hourEndDate_YYYYMMDDHH + '.'

          ind = WHERE(accumWEASDGrid_ eq NoDataValue, beforeCount)
          ind = WHERE((accumWEASDGrid_ eq NoDataValue) or $
                      (hourlyWEASDGrid eq NoDataValue), count)
          accumWEASDGrid_ = accumWEASDGrid_ + hourlyWEASDGrid
          if (count gt 0) then accumWEASDGrid_[ind] = NoDataValue
          if (count gt beforeCount) then $
              USR_MSG, 'WARNING: no-data values added to accumulated ' + $
                       '"WEASD" grid for hour ending ' + $
                       hourEndDate_YYYYMMDDHH + '.'

          ind = !NULL

      endelse

      ;; LOADCT, 27
      ;; WSET_OR_WINDOW, 0, $
      ;;                 XSIZE = RAPGridProjInfo.nCols * 2, $
      ;;                 YSIZE = RAPGridProjInfo.nRows * 2
      ;; REAL_TVSCL, REBIN(accumWEASDGrid_, $
      ;;                   RAPGridProjInfo.nCols * 2, $
      ;;                   RAPGridProjInfo.nRows * 2, $
      ;;                   /SAMPLE), $
      ;;             NDV = NoDataValue, $
      ;;             MAX_VALUE = MAX(accumAPCPGrid_)
      ;; WSET_OR_WINDOW, 2, $
      ;;                 XSIZE = RAPGridProjInfo.nCols * 2, $
      ;;                 YSIZE = RAPGridProjInfo.nRows * 2
      ;; REAL_TVSCL, REBIN(accumAPCPGrid_, $
      ;;                   RAPGridProjInfo.nCols * 2, $
      ;;                   RAPGridProjInfo.nRows * 2, $
      ;;                   /SAMPLE), NDV = NoDataValue

  endfor

  hourlyAPCPGrid = !NULL
  hourlyWEASDGrid = !NULL

;+
; Enforce a requirement that WEASD not exceed APCP.
;-
  ind = WHERE((accumWEASDGrid_ ne NoDataValue) and $
              (accumAPCPGrid_ ne NoDataValue), count)
  if (count gt 0) then $
      accumWEASDGrid_[ind] = accumWEASDGrid_[ind] < accumAPCPGrid_[ind]

;+
; Replace temporary grids.
;-
  accumAPCPGrid = TEMPORARY(accumAPCPGrid_)
  accumWEASDGrid = TEMPORARY(accumWEASDGrid_)

  perfect = perfect_
  minFcstHourFound = minFcstHourFound_
  maxFcstHourFound = maxFcstHourFound_

  if (perfect and NOT(KEYWORD_SET(No_save_file))) then begin

;+
;     Create IDL save file.
;-
      RAPGridProjInfo_ = RAPGridProjInfo
      ndv_ = NoDataValue

      SAVE, accumAPCPGrid, accumWEASDGrid, $
            RAPGridProjInfo_, ndv_, $
            FILE = ScratchDir + '/' + savFile

      if KEYWORD_SET(Verbose) then $
          USR_MSG, 'APCP and WEASD grids saved to ' + $
                   ScratchDir + '/' + savFile

  endif

  RETURN

end
