PRO GET_MIN_MAX_AVE_HRRR_LC_2M_TEMP, $
    AnalysisEndDate_YYYYMMDDHH, $
    DurationHours, $
    TargetFcstHour, $
    MinSubFcstHour, $
    MaxSubFcstHour, $
    HRRRDir, $
    ScratchDir, $
    NoDataValue, $
    minTmpGrid, $
    maxTmpGrid, $
    aveTmpGrid, $
    perfect, $
    HRRR_GRID_PROJ_INFO = HRRRGridProjInfo, $
    MIN_FORECAST_HOUR_FOUND = minFcstHourFound, $
    MAX_FORECAST_HOUR_FOUND = maxFcstHourFound, $
    MAX_MISSING_HOURS = MaxMissingHours, $
    NUM_MISSING_HOURS = numMissingHours, $
    VERBOSE = verbose, $
    NO_SAVE_FILE = no_save_file
;+
; Get hourly High Resolution Rapid Refresh (HRRR) 2-meter air
; temperatures (TMP) from GRIB files, and determine minimum, maximum,
; and mean values on the 3 km CONUS Lambert conformal grid for HRRR.
;
; There are different conventions for storing/archiving HRRR data that
; this procedure will need to handle. In the case of long-term
; archives, data are stored in directories such as:
;
;   /nwcdev/archive/HRRR_archive/{YYYY}/{MM}/{DD}
;
; In the case of GRIB files handled by operations, data are stored in
; a place like
;
;   /operations/misc/gisrs_incoming/HRRR
;
; In all cases we assume the GRIB files have names following one of
; these conventions:
;
;   {YY}{DOY}.hrrr.t{HH}z.wrfsfcf{FF}.grib2
;   hrrr.{YYYYMMDD}.t{HH}z.wrfsfcf{FF}.grib2
;
; If the desired TargetFcstHour is not found for any hour of the
; analysis period, a range of forecasts defined by the MinSubFcstHour
; and MaxSubFcstHour arguments are considered as alternatives.
; Typically the TargetFcstHour = 0 for instantaneous fields such as
; temperature, since that is an analysis result, generally more
; accurate than any forecast will ever be.
;
; :Params:
;
;     AnalysisEndDate_YYYYMMDDHH : in, required, type=STRING
;         End time of analysis period in UTC, in the form YYYYMMDDHH.
;     DurationHours : in, required, type=INT
;         Analysis duration in hours; e.g., 24 for min/max/ave grids
;         over a single day.
;     TargetFcstHour : in, required, type=INT
;         The forecast hour that is sought for all data.
;     MinSubFcstHour : in, required, type=INT
;         The minimum forecast hour to substitute in place of
;         TargetFcstHour, if data for TargetFcstHour is unavailable.
;     MaxSubFcstHour : in, required, type=INT
;         The maximum forecast hour to substitute in place of
;         TargetFcstHour, if dat for TargetFcstHour is unavailable.
;     HRRRDir : in, required, type=STRING
;         The directory where High Resolution Rapid Refresh (HRRR)
;         data are stored.
;     ScratchDir : in, required, type=STRING
;         The directory where temporary files generated by this
;         procedure and the procedures it calls are stored.
;     NoDataValue : in, required, type=FLOAT
;         The value to use for missing/no-data on all grids. Missing
;         values for input data (e.g., 9.999e20 on GRIB data produced
;         at NCEP) are replaced by this value, and missing/no-data is
;         set to this value for all outputs.
;     minTmpGrid : out, type=FLTARR(1799 x 1059)
;         The minimum HRRR "2 m above ground" temperature across the
;         analysis period.
;     maxTmpGrid : out, type=FLTARR(1799 x 1059)
;         The maximum HRRR "2 m above ground" temperature across the
;         analysis period.
;     aveTmpGrid : out, type=FLTARR(1799 x 1059)
;         The average HRRR "2 m above ground" temperature across the
;         analysis period.
;     perfect : out, type=BYTE
;         A flag that indicates whether (1) or not (0) data was found
;         for the TargetFcstHour for every hour of the analysis
;         period.
;
; :Keywords:
;
;     HRRR_GRID_PROJ_INFO : type=STRUCT
;         A named variable that will capture the structure describing
;         the HRRR (Lambert conformal) grid and coordinate system. If
;         this variable is undefined, it will be defined. If it is
;         already defined, it will be verified against the contents of
;         all input GRIB2 files.
;         Structure tags:
;
;         lonV (type=DOUBLE):
;         The orientation longitude, degrees.
;
;         latD (type=DOUBLE):
;         The latitude where the grid spacing is defined, degrees.
;
;         latSec1 (type=DOUBLE):
;         The first standard parallel for the projection, degrees.
;
;         latSec2 (type=DOUBLE):
;         The second standard parallel for the projection, degrees.
;
;         eRadM (type=DOUBLE):
;         The radius of the spherical earth in the projection, meters.
;
;         lat00 (type=DOUBLE):
;         The lower left grid cell center latitude, degrees.
;
;         lon00 (type=DOUBLE):
;         The lower left grid cell center longitude, degrees.
;
;         nCols (type=LONG):
;         The number of columns in the GRIB record.
;
;         nRows (type=LONG):
;         The number of rows in the GRIB record.
;
;         dx (type=DOUBLE):
;         The grid spacing in x, meters.
;
;         dy (type=DOUBLE):
;         The grid spacing in y, meters.
;
;     MIN_FORECAST_HOUR_FOUND : out, type=INT
;         Set this to a named variable in which the minimum forecast
;         hour contributing to the accumulation is returned.
;
;     MAX_FORECAST_HOUR_FOUND : out, type=INT
;         Set this to a named variable in which the maximum forecast
;         hour contributing to the accumulation is returned.
;
;     MAX_MISSING_HOURS : in, type=INT
;         The maximum number of hours for which missing data will be
;         tolerated. Default value is 0.
;
;     NUM_MISSING_HOURS : out, type=INT
;         Set this to a named variable in which the number of hours
;         missing from the min/max/ave calculation is returned.
;
;     VERBOSE : in, type=BOOLEAN
;         Activates the "verbose" option, causing this procedure to
;         produce some extra output text.
;
;     NO_SAVE_FILE : in, type=BOOLEAN
;         Deactivates the default behavior of this procedure, which
;         stores a version of its results in the ScratchDir as an IDL
;         save file, and reads its data from a save file if one is
;         found.
;-
  COMMON info, Message ; used by USR_MSG and ERR_MSG

;+
; The best way to check for the success of this procedure is to do
; "if (NOT(ISA(minTmpGrid)) or NOT(ISA(maxTmpGrid)) or
; NOT(ISA(aveTmpGrid))) then STOP" or something similar in the
; caller, since all will be returned as !NULL if this procedure is
; unable to get data.
;-
  minTmpGrid = !NULL
  maxTmpGrid = !NULL
  aveTmpGrid = !NULL
  perfect = 0B

;+
; Error handler for anything the main procedure code misses. Example:
; RESTORE encounters a file that was truncated because a disk filled.
; Comment this section out for debugging.
;-
  CATCH, errorStatus
  if (errorStatus ne 0) then begin
      ERR_MSG, !Error_State.Msg
      RETURN
  endif

;+
; Check arguments for correct type and valid contents.
;-
  if NOT(ISA(AnalysisEndDate_YYYYMMDDHH, 'STRING')) then begin
      ERR_MSG, 'Analysis end date/time argument ' + $
               'must be a STRING.'
      RETURN
  endif
  if (STRLEN(AnalysisEndDate_YYYYMMDDHH) ne 10) then begin
      ERR_MSG, 'Invalid analysis end date/time "' + $
               AnalysisEndDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, 10 digits).'
      RETURN
  endif
  if NOT(STREGEX(AnalysisEndDate_YYYYMMDDHH, '[0-9]{10}', /BOOLEAN)) $
      then begin
      ERR_MSG, 'Invalid analysis end date/time "' + $
               AnalysisEndDate_YYYYMMDDHH + $
               '" (required form is YYYYMMDDHH, all numeric).'
      RETURN
  endif

  if (DurationHours lt 0) then begin
      ERR_MSG, 'Duration must be a positive integer number of hours.'
      RETURN
  endif

  if ((TargetFcstHour lt 0) or $
      (MinSubFcstHour lt 0) or $
      (MaxSubFcstHour lt 0)) then begin
      ERR_MSG, 'All forecast hour options must be nonnegative.'
      RETURN
  endif

  if (MinSubFcstHour gt MaxSubFcstHour) then begin
      ERR_MSG, 'Minimum substitute forecast hour may not be larger than ' + $
               'maximum substitute forecast hour.'
      RETURN
  endif

  if NOT(ISA(HRRRDir, 'STRING')) then begin
      ERR_MSG, 'Location of HRRR archive must be a STRING.'
      RETURN
  endif

  if NOT(FILE_TEST(HRRRDir, /DIRECTORY)) then begin
      ERR_MSG, 'HRRR archive directory "' + HRRRDir + '" not found.'
      RETURN
  endif

  if NOT(FILE_TEST(HRRRDir, /READ)) then begin
      ERR_MSG, 'HRRR archive directory "' + HRRRDir + '" not readable.'
      RETURN
  endif

  if NOT(ISA(ScratchDir, 'STRING')) then begin
      ERR_MSG, 'Location of scratch directory must be a STRING.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /DIRECTORY)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not found.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /READ)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not readable.'
      RETURN
  endif

  if NOT(FILE_TEST(ScratchDir, /WRITE)) then begin
      ERR_MSG, 'Scratch directory "' + ScratchDir + '" not writeable.'
      RETURN
  endif

  if NOT(ISA(NoDataValue, 'FLOAT')) then $
      ERR_MSG, 'WARNING: no-data value should be a floating point value.'

  if NOT(KEYWORD_SET(MaxMissingHours)) then MaxMissingHours = 0

  if (MaxMissingHours lt 0) then begin
      ERR_MSG, 'Maximum bad/missing hours must be a nonnegative integer' + $
               'number of hours.'
      RETURN
  endif

  if (MaxMissingHours ge DurationHours) then begin
      ERR_MSG, 'Maximum bad/missing hours must be less than the duration.'
      RETURN
  endif

  numMissingHours = 0

  if KEYWORD_SET(HRRRGridProjInfo) then begin

;+
;     Verify the HRRRGridProjInfo structure.
;-
      sizeHRRRGridProjInfo = SIZE(HRRRGridProjInfo)
      if (sizeHRRRGridProjInfo[0] ne 1) then begin
          ERR_MSG, 'HRRR_GRID_PROJ_INFO structure mismatch (non-scalar).'
          RETURN
      endif

      if ((sizeHRRRGridProjInfo[1] ne 1) or $
          (sizeHRRRGridProjInfo[2] ne 8)) then begin
          ERR_MSG, 'HRRR_GRID_PROJ_INFO structure mismatch ' + $
                   '(not a structure).'
          RETURN
      endif

      sizeHRRRGridProjInfo = !NULL

      structOK = 1

      tagNames = TAG_NAMES(HRRRGridProjInfo)
      ind = WHERE(tagNames eq 'LONV', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lonV" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATD', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latD" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC1', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec1" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC2', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec2" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'ERADM', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "eRadM" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LAT00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lat00" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'LON00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lon00" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'NCOLS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nCols" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'NROWS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nRows" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'DX', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dx" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      ind = WHERE(tagNames eq 'DY', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dy" tag in HRRR_GRID_PROJ_INFO.'
          structOK = 0
      endif

      if structOK then begin

          if NOT(ISA(HRRRGridProjInfo.lonV, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lonV".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.latD, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latD".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.latSec1, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latSec1".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.latSec2, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"latSec2".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.eRadM, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"eRadM".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.lat00, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lat00".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.lon00, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"lon00".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.nCols, 'LONG')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing LONG element ' + $
                       '"nCols".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.nRows, 'LONG')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing LONG element ' + $
                       '"nRows".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.dx, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"dx".'
              structOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo.dy, 'DOUBLE')) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO missing DOUBLE element ' + $
                       '"dy".'
              structOK = 0
          endif

      endif

      if NOT(structOK) then begin

          ERR_MSG, 'Unexpected HRRR_GRID_PROJ_INFO structure definition.'
          RETURN

      endif

      structOK = !NULL

  endif

  savFile = 'HRRR_LC_MIN_MAX_AVE_TMP' + $
            '_f' + STRING(TargetFcstHour, FORMAT = '(I2.2)') + $
            '_' + STRCRA(DurationHours) + 'h' + $
            '_ending_' + AnalysisEndDate_YYYYMMDDHH + '.sav'

  if (NOT(KEYWORD_SET(no_save_file)) and $
      FILE_TEST(ScratchDir + '/' + savFile)) then begin

;+
;     Get data from cache file rather than reading HRRR data
;     directly.
;-
      if KEYWORD_SET(verbose) then $
          USR_MSG, 'Reading ' + ScratchDir + '/' + savFile

      RESTORE, ScratchDir + '/' + savFile

;+
;     Verify the contents of the save file.
;-
      if NOT(ISA(minTmpGrid)) then begin
          ERR_MSG, 'No "minTmpGrid" variable in ' + $
                   ScratchDir + '/' + savFile
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      gridSize = SIZE(minTmpGrid)
      if (gridSize[0] ne 2) then begin
          ERR_MSG, '"minTmpGrid" in ' + ScratchDir + '/' + saveFile + $
                   ' is not a 2-D array.'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      nCols = gridSize[1]
      nRows = gridSize[2]

      if NOT(ISA(maxTmpGrid)) then begin
          ERR_MSG, 'No "maxTmpGrid" variable in ' + $
                   ScratchDir + '/' + savFile
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      gridSize = SIZE(maxTmpGrid)
      if (gridSize[0] ne 2) then begin
          ERR_MSG, '"maxTmpGrid" in ' + ScratchDir + '/' + saveFile + $
                   ' is not a 2-D array.'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      if (gridSize[1] ne nCols) then begin
          ERR_MSG, '"maxTmpGrid" column dimension (' + $
                   STRCRA(gridSize[1]) + ') ' + $
                   'does not match that of "minTmpGrid" (' + $
                   STRCRA(nCols) + ').'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      if (gridSize[2] ne nRows) then begin
          ERR_MSG, '"maxTmpGrid" row dimension (' + $
                   STRCRA(gridSize[2]) + ') ' + $
                   'does not match that of "minTmpGrid (' + $
                   STRCRA(nRows) + ').'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      if NOT(ISA(aveTmpGrid)) then begin
          ERR_MSG, 'No "aveTmpGrid" variable in ' + $
                   ScratchDir + '/' + savFile
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      gridSize = SIZE(aveTmpGrid)
      if (gridSize[0] ne 2) then begin
          ERR_MSG, '"aveTmpGrid" in ' + ScratchDir + '/' + saveFile + $
                   ' is not a 2-D array.'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      if (gridSize[1] ne nCols) then begin
          ERR_MSG, '"aveTmpGrid" column dimension (' + $
                   STRCRA(gridSize[1]) + ') ' + $
                   'does not match that of "minTmpGrid" (' + $
                   STRCRA(nCols) + ').'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      if (gridSize[2] ne nRows) then begin
          ERR_MSG, '"aveTmpGrid" row dimension (' + $
                   STRCRA(gridSize[2]) + ') ' + $
                   'does not match that of "minTmpGrid" (' + $
                   STRCRA(nRows) + ').'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      gridSize = !NULL

      if NOT(ISA(ndv_)) then begin
          ERR_MSG, 'Missing "ndv_" variable in ' + $
                   ScratchDir + '/' + savFile
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      if NOT(ISA(HRRRGridProjInfo_)) then begin
          ERR_MSG, 'No HRRR grid/projection info structure in ' + $
                   ScratchDir + '/' + savFile
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

;+
;     Verify the structure of HRRRGridProjInfo_ and grid dimensions.
;-
      foo = SIZE(HRRRGridProjInfo_)
      if (foo[0] ne 1) then begin
          ERR_MSG, 'HRRRGridProjInfo_ structure mismatch (non-scalar) ' + $
                   'in ' + ScratchDir + '/' + savFile
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      if ((foo[1] ne 1) or (foo[2] ne 8)) then begin
          ERR_MSG, 'HRRRGridProjInfo_ structure mismatch ' + $
                   '(not a structure) ' + $
                   'in ' + ScratchDir + '/' + savFile
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN
      endif

      savFileOK = 1

      tagNames = TAG_NAMES(HRRRGridProjInfo_)
      ind = WHERE(tagNames eq 'LONV', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lonV" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LATD', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latD" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC1', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec1" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LATSEC2', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "latSec2" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'ERADM', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "eRadM" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LAT00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lat00" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'LON00', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "lon00" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'NCOLS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nCols" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'NROWS', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "nRows" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'DX', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dx" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      ind = WHERE(tagNames eq 'DY', count)
      if (count eq 0) then begin
          ERR_MSG, 'No "dy" tag in "HRRRGridProjInfo_" from ' + $
                   'IDL save file ' + ScratchDir + '/' + savFile
          savFileOK = 0
      endif

      if savFileOK then begin

          if NOT(ISA(HRRRGridProjInfo_.lonV, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"lonV" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.latD, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"latD" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.latSec1, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"latSec1" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.latSec2, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"latSec2" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.eRadM, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"eRadM" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.lat00, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"lat00" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.lon00, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"lon00" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.nCols, 'LONG')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing LONG element ' + $
                       '"nCols" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif else begin
              if (nCols ne HRRRGridProjInfo_.nCols) then begin
                  ERR_MSG, 'Grid columns in ' + $
                           ScratchDir + '/' + savFile + $
                           ' (' + STRCRA(nCols) + ') ' + $
                           'do not match "HRRRGridProjInfo_" value ' + $
                           '(' + STRCRA(HRRRGridProjInfo_.nCols) + ').'
                  savFileOK = 0
              endif
          endelse

          if NOT(ISA(HRRRGridProjInfo_.nRows, 'LONG')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing LONG element ' + $
                       '"nRows" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif else begin
              if (nRows ne HRRRGridProjInfo_.nRows) then begin
                  ERR_MSG, 'Grid rows in ' + $
                           ScratchDir + '/' + savFile + $
                           ' (' + STRCRA(nRows) + ') ' + $
                           'do not match "HRRRGridProjInfo_" value ' + $
                           '(' + STRCRA(HRRRGridProjInfo_.nRows) + ').'
                  savFileOK = 0
              endif
          endelse

          if NOT(ISA(HRRRGridProjInfo_.dx, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"dx" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

          if NOT(ISA(HRRRGridProjInfo_.dy, 'DOUBLE')) then begin
              ERR_MSG, '"HRRRGridProjInfo_" missing DOUBLE element ' + $
                       '"dy" ' + $
                       'in ' + ScratchDir + '/' + savFile
              savFileOK = 0
          endif

      endif

      if (savFileOK and KEYWORD_SET(HRRRGridProjInfo)) then begin

;+
;         Verify HRRRGridProjInfo structure from caller against
;         HRRRGridProjInfo_ structure from save file.
;-
          if NOT(COMPARE(HRRRGridProjInfo.lonV, HRRRGridProjInfo_.lonV)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "lonV" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.latD, HRRRGridProjInfo_.latD)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "latD" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.latSec1, $
                         HRRRGridProjInfo_.latSec1)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "latSec1" ' + $
                       'mismatch between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.latSec2, $
                         HRRRGridProjInfo_.latSec2)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "latSec2" ' + $
                       'mismatch between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.eRadM, $
                         HRRRGridProjInfo_.eRadM)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "eRadM" ' + $
                       'mismatch between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.lat00, HRRRGridProjInfo_.lat00)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "lat00" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.lon00, HRRRGridProjInfo_.lon00)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "lon00" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if (HRRRGridProjInfo.nCols ne HRRRGridProjInfo_.nCols) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "nCols" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if (HRRRGridProjInfo.nRows ne HRRRGridProjInfo_.nRows) then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "nRows" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.dx, HRRRGridProjInfo_.dx)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "dx" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

          if NOT(COMPARE(HRRRGridProjInfo.dy, HRRRGridProjInfo_.dy)) $
              then begin
              ERR_MSG, 'HRRR_GRID_PROJ_INFO structure "dy" mismatch ' + $
                       'between keyword and ' + $
                       ScratchDir + '/' + savFile + ' data.'
              savFileOK = 0
          endif

      endif

      if (savFileOK and NOT(KEYWORD_SET(HRRRGridProjInfo))) then begin

;+
;         Copy HRRRGridProjInfo structure from save file.
;-
          HRRRGridProjInfo = HRRRGridProjInfo_

      endif

      if NOT(savFileOK) then begin

          ERR_MSG, 'Unexpected structure/content in IDL save file ' + $
                   savFile + '; returning NULL grids.'
          minTmpGrid = !NULL
          maxTmpGrid = !NULL
          aveTmpGrid = !NULL
          RETURN

      endif

;+
;     Verify the no-data value is consistent; modify if it is not.
;-
      if (ndv_ ne NoDataValue) then begin
          ERR_MSG, 'WARNING: value of "ndv_" variable in ' + $
                  ScratchDir + '/' + savFile + $
                  ' (' + STRCRA(ndv_) + ') differs from ' + $
                  ' argument "NoDataValue" ' + $
                  '(' + STRCRA(NoDataValue) + '). Will adapt.'
          ind = WHERE(aveTmpGrid eq ndv_, count)
          if (count gt 0) then aveTmpGrid[ind] = NoDataValue
          ind = WHERE(minTmpGrid eq ndv_, count)
          if (count gt 0) then minTmpGrid[ind] = NoDataValue
          ind = WHERE(maxTmpGrid eq ndv_, count)
          if (count gt 0) then maxTmpGrid[ind] = NoDataValue
          ind = !NULL
      endif

      perfect = 1B
      minFcstHourFound = TargetFcstHour ; save file would not have been
      maxFcstHourFound = TargetFcstHour ; made otherwise

      RETURN

  endif

;+
; Read HRRR data from GRIB file/s. This is really the beginning of the
; process if we do not have a SAVE file.
;-
  perfect_ = 1B ; flag to indicate that we got our first choice for all.
  numMissingHours = 0
  analysisEndDate_Julian = YYYYMMDDHH_TO_JULIAN(AnalysisEndDate_YYYYMMDDHH)

  minFcstHourFound_ = (MaxSubFcstHour > TargetFcstHour) + 1
  maxFcstHourFound_ = (MinSubFcstHour < TargetFcstHour) - 1

  for hc = 0, DurationHours - 1 do begin

      if (numMissingHours gt MaxMissingHours) then BREAK

      hourStartDate_Julian = analysisEndDate_Julian - $
                             DOUBLE(DurationHours) / 24.0D + $
                             DOUBLE(hc) / 24.0D

      hourStartDate_YYYYMMDDHH = JULIAN_TO_YYYYMMDDHH(hourStartDate_Julian)

      hourlyTmpGrid = !NULL

      GET_HOURLY_HRRR_LC_2M_TEMP, $
          hourStartDate_YYYYMMDDHH, $
          TargetFcstHour, $
          MinSubFcstHour, $
          MaxSubFcstHour, $
          HRRRDir, $
          ScratchDir, $
          NoDataValue, $
          hourlyTmpGrid, $
          perfect__, $
          HRRR_GRID_PROJ_INFO = HRRRGridProjInfo, $
          FORECAST_HOUR_FOUND = fcstHourFound, $
          VERBOSE = KEYWORD_SET(verbose), $
          /NO_SAVE_FILE ; regardless of setting of NO_SAVE_FILE in call

      if NOT(ISA(hourlyTmpGrid)) then begin
          ERR_MSG, 'Failed to get HRRR ":TMP:2 m above ground:" for hour ' + $
                   hourStartDate_YYYYMMDDHH
          perfect_ = 0B ; only takes one bad/missing hour to become imperfect
          numMissingHours++
          CONTINUE
      endif

      minFcstHourFound_ = minFcstHourFound_ < fcstHourFound
      maxFcstHourFound_ = maxFcstHourFound_ > fcstHourFound

      if NOT(perfect__) then perfect_ = 0B ; only takes one not perfect!

      if ((hc - numMissingHours) eq 0) then begin

          minTmpGrid_ = hourlyTmpGrid
          maxTmpGrid_ = hourlyTmpGrid
          aveTmpGrid_ = hourlyTmpGrid

      endif else begin

          ind = WHERE(minTmpGrid_ eq NoDataValue, beforeCount)
          ind = WHERE((minTmpGrid_ eq NoDataValue) or $
                      (hourlyTmpGrid eq NoDataValue), count)
          minTmpGrid_ = minTmpGrid_ < hourlyTmpGrid
          if (count gt 0) then minTmpGrid_[ind] = NoDataValue
          if (count gt beforeCount) then $
              USR_MSG, 'WARNING: no-data values added to minimum ' + $
                       '"TMP" grid for ' + hourStartDate_YYYYMMDDHH + '.'

          ind = WHERE(maxTmpGrid_ eq NoDataValue, beforeCount)
          ind = WHERE((maxTmpGrid_ eq NoDataValue) or $
                      (hourlyTmpGrid eq NoDataValue), count)
          maxTmpGrid_ = maxTmpGrid_ > hourlyTmpGrid
          if (count gt 0) then maxTmpGrid_[ind] = NoDataValue
          if (count gt beforeCount) then $
              USR_MSG, 'WARNING: no-data values added to maximum ' + $
                       '"TMP" grid for ' + hourStartDate_YYYYMMDDHH + '.'

          ind = WHERE(aveTmpGrid_ eq NoDataValue, beforeCount)
          ind = WHERE((aveTmpGrid_ eq NoDataValue) or $
                      (hourlyTmpGrid eq NoDataValue), count)
          aveTmpGrid_ = aveTmpGrid_ + hourlyTmpGrid
          if (count gt 0) then aveTmpGrid_[ind] = NoDataValue
          if (count gt beforeCount) then $
              USR_MSG, 'WARNING: no-data values added to average ' + $
                       '"TMP" grid for ' + hourStartDate_YYYYMMDDHH + '.'

          ind = !NULL

      endelse

      ;; WSET_OR_WINDOW, 0, $
      ;;                 XSIZE = HRRRGridProjInfo.nCols, $
      ;;                 YSIZE = HRRRGridProjInfo.nRows
      ;; if (hc eq 0) then LOADCT, 27
      ;; ind = WHERE(aveTmpGrid_ eq NoDataValue, count)
      ;; foo = aveTmpGrid_ / (hc + 1)
      ;; if (count gt 0) then foo[ind] = NoDatavalue
      ;; ind = !NULL
      ;; REAL_TVSCL, REBIN(foo, $
      ;;                   HRRRGridProjInfo.nCols, $
      ;;                   HRRRGridProjInfo.nRows, $
      ;;                   /SAMPLE), NDV = NoDataValue

  endfor

  hourlyTmpGrid = !NULL

  if (numMissingHours gt MaxMissingHours) then begin
      if KEYWORD_SET(verbose) then $
          ERR_MSG, 'Insufficient data available to calculate ' + $
                   'temperature min./max./ave.'
      RETURN
  endif

;+
; Convert total of temperatures to an average.
;-
  ind = WHERE(aveTmpGrid_ eq NoDataValue, count)
  aveTmpGrid_ = aveTmpGrid_ / (DurationHours - numMissingHours)
  if (count gt 0) then aveTmpGrid_[ind] = NoDataValue

  minTmpGrid = TEMPORARY(minTmpGrid_)
  maxTmpGrid = TEMPORARY(maxTmpGrid_)
  aveTmpGrid = TEMPORARY(aveTmpGrid_)

  perfect = TEMPORARY(perfect_)
  minFcstHourFound = TEMPORARY(minFcstHourFound_)
  maxFcstHourFound = TEMPORARY(maxFcstHourFound_)

  if (perfect and NOT(KEYWORD_SET(no_save_file))) then begin

;+
;     Create IDL save file.
;-
      HRRRGridProjInfo_ = HRRRGridProjInfo
      ndv_ = NoDataValue

      SAVE, minTmpGrid, maxTmpGrid, aveTmpGrid, $
            HRRRGridProjInfo_, ndv_, $
            FILE = ScratchDir + '/' + savFile

      if KEYWORD_SET(verbose) then $
          USR_MSG, 'Minimum, maximum, and average ' + $
                   STRCRA(DurationHours) + '-hour air temperature grids ' + $
                   'saved to ' + ScratchDir + '/' + savFile

  endif

  RETURN

end
